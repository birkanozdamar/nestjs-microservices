
services:
  apigateway:
    build:
      context: ./api-gateway
    container_name: apigateway
    ports:
      - "3000:3000"
    depends_on:
      - user-service
      - customer-service
      - sales-tracking-service
    networks:
      - gateway-network
    restart: unless-stopped
    volumes:
      - ./api-gateway:/usr/src/app
      - ./api-gateway/node_modules:/usr/src/app/node_modules

  sales-tracking-service:
    build:
      context: ./sales-tracking-service
    container_name: sales-tracking-service
    depends_on:
      sales-tracking-mongo-db:
        condition: service_healthy
    networks:
      - sales-tracking-db-network
      - gateway-network
    restart: unless-stopped
    volumes:
      - ./sales-tracking-service:/usr/src/app
      - ./sales-tracking-service/node_modules:/usr/src/app/node_modules


  sales-tracking-mongo-db:
    image: mongo:6.0
    container_name: sales-tracking-mongo-db
    ports:
    - 27018:27017
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: admin123
    volumes:
      - sales-tracking-mongo-db:/data/db
    networks:
      - sales-tracking-db-network         
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.runCommand('ping').ok == 1", "--quiet", "--host", "localhost", "-u", "admin", "-p", "admin123"]
      interval: 10s
      timeout: 5s
      retries: 5
    logging:
      driver: "none"   

  user-service:
    build:
      context: ./user-service
    container_name: user-service
    environment:
      - DATABASE_HOST=user-db
      - DATABASE_PORT=3306
      - DATABASE_USER=root
      - DATABASE_PASSWORD=root
      - DATABASE_NAME=userdb
    depends_on:
      user-db:
        condition: service_healthy
    networks:
      - user-db-network
      - gateway-network
    restart: unless-stopped
    volumes:
      - ./user-service:/usr/src/app
      - ./user-service/node_modules:/usr/src/app/node_modules

  user-db:
    image: mysql:8
    container_name: user-db
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: userdb
    volumes:
      - user-db-data:/var/lib/mysql
    ports:
    # test için açık
      - "3307:3306"
    networks:
      - user-db-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 10s
      timeout: 5s
      retries: 5

  customer-service:
    build:
      context: ./customer-service
    container_name: customer-service
    environment:
      - DATABASE_HOST=customer-db
      - DATABASE_PORT=3306
      - DATABASE_USER=root
      - DATABASE_PASSWORD=root
      - DATABASE_NAME=customerdb
    depends_on:
      customer-db:
        condition: service_healthy
      customer-mongo-db:
        condition: service_healthy
    networks:
      - customer-db-network
      - gateway-network
    restart: unless-stopped
    volumes:
      - ./customer-service:/usr/src/app
      - ./customer-service/node_modules:/usr/src/app/node_modules

  customer-db:
    image: mysql:8
    container_name: customer-db
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: customerdb
    volumes:
      - customer-db-data:/var/lib/mysql
    ports:
    # test için açık
      - "3309:3306"
    networks:
      - customer-db-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 10s
      timeout: 5s
      retries: 5

  customer-mongo-db:
    image: mongo:6.0
    container_name: customer-mongo-db
    ports:
    # test için açık
    - 27017:27017                 
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: admin123
    volumes:
      - customer-mongo-db:/data/db  
    networks:
      - customer-db-network         
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.runCommand('ping').ok == 1", "--quiet", "--host", "localhost", "-u", "admin", "-p", "admin123"]
      interval: 10s
      timeout: 5s
      retries: 5
    logging:
      driver: "none"

networks:
  user-db-network:
    driver: bridge
  customer-db-network:
    driver: bridge
  gateway-network:
    driver: bridge
  sales-tracking-db-network:
    driver: bridge

volumes:
  apigateway:
  user-service:
  customer-service:
  sales-tracking-service:
  user-db-data:
  customer-db-data:
  sales-tracking-mongo-db:
  customer-mongo-db:
